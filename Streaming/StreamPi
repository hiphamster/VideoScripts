#!/bin/bash
#
#######################################################################################
# StreamPi scrpit by TheOuterLinux                                                    #
#                                                                                     #
# This script is meant to be used to stream your screen to a service that supports    #
# RTMP URL's like Twitch, YouTube, Picarto, etc. However, you can also screen         #
# record to your local hard drive by using /path/to/StreamPi [output.flv]. Otherwise, #
# either do /path/to/StreamPi [rtmp://...] or change the RTMP variable below to store #
# your stream's RTMP link for you. Personally, I would leave this srcipt as is and    #
# add an alias in my .bashrc file such as:                                            #
#    alias stream_twitch="/path/to/StreamPi rtmp://..twitch..."                       #
#    alias stream_youtube="/path/to/StreamPi rtmp://..youtube..."                     #
# The title comes from the fact it was mainly designed for a Raspberry Pi, but will   #
# still work on other Linux systems.                                                  #
#######################################################################################
#
#DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" #Helps run scripts from any directory
#I included the above commented-out "DIR" varibale just in-case I need it. It grabs the
#directory the script is in and makes it easier to work with files relative to the script's
#location as opposed to having to memorize conventional Linux filesystem structures or $HOME
#folder pathways. "$DIR" would return "/path/to/folder/script/is/in/"
#
#####[Variables - Default/Starting place]#####
FFMPEG=/usr/bin/ffmpeg #I did this because some people download precompiled versions
RTMP="$1" #Change and use "rtmp://..." URL to store Twitch RTMP in the script otherwise, 
#..........you'll have to use "/path/to/StreamPi [rtmp://...]" each time. You can also
#..........use /path/to/StreamPi [file.flv] to screen-record to a local FLV file.
#
SOUNDSERVER=alsa #Defaults to ALSA because script is meant for a Raspberry Pi, but script
#.................down below also detects whether or not you are using something else and
#.................may change automatically to pulse.
#
SCALE="trunc(oh*a/2)*2:720" #Scales screen recording to 720p if monitor resolution is too high.
#............................The "formula" basically prevents "divisible by two" h264 errors.
#............................If you're using this script on a newer computer, you should be able
#............................to replace "720" with "1080" for higher resolution.
QUALITY=23 #(as in CRF value). Don't go lower than 1 (perfect Internet) or higher than 51 (worst Internet).
#...........Changing this value can help prevent streaming errors at the expense of video quality.
THREAD_QUEUE=1024 #Needed because some systems can't record audio without it
#
SPANMONITORS=N #Change to "Y" if you have a laptop (or two+ monitors) and would like to stream/record 
#...............both screens if the lid is open and you are not mirroring.
#
ANTI_BOTTOM_PANEL=0 #The height of your bottom panel you can block from stream; leave at "0" if you don't have one or care.
ANTI_TOP_PANEL=0 #The height of your top panel you can block from stream; leave at "0" if you don't have one or care.
ANTI_LEFT_PANEL=0 #The width of your left panel you can block from stream; leave at "0" if you don't have one or care.
ANTI_RIGHT_PANEL=0 #The width of your right panel you can block from stream; leave at "0" if you don't have one or care.
#
IMAGEOVERLAY="$2" #Add /path/to/transparent.png of you want an overlay image like in OBS Studio. I suggest that you use a
#................program like GIMP and set the dimensions to your monitor width and height but as a transparent PNG file
#................because this will go on top of everything. You can leave this as is if you do not want an overlay. Just
#................make sure whatever file format you choose, your system needs to support it and have an alpha channel (RGBA).
#................As is, it works much the same way as the RTMP variable such as: "/path/to/StreamPi rtmp://... /path/to/overlay."
#
################################################
#####[DO NOT EDIT ANYTHING BELOW THIS LINE]#####
################################################
#
OVERLAYALPHA="$(file $IMAGEOVERLAY | grep -o RGBA | tail -n 1)"
if [ "$IMAGEOVERLAY" != "" ] && [ -f "$IMAGEOVERLAY" ] && [ "$OVERLAYALPHA" = "RGBA" ] #Checks whether or not you have an overlay set, if it exists, and has an alpha channel.
then
    OVERLAYes=1 
else
    echo "Either no overlay set or image does not have alpha channel. Skipping."
fi
#--[Finds monitor size and then check N/Y for recording full span of two or more monitors (if applicable)]#####
if [ "$SPANMONITORS" = "N" ] || [ "$SPANMONITORS" = "n" ] || [ "$SPANMONITORS" = "0" ]
then
    SCREENWIDTH="$(xrandr | grep '*' | awk '{ print $1 }' | tail -n 1 | cut -d \x -f 1)" #If using ext. monitor and laptop open, get ext. monitor width
    SCREENWIDTH="$(( $SCREENWIDTH - $ANTI_LEFT_PANEL - $ANTI_RIGHT_PANEL ))"
    SCREENHEIGHT="$(xrandr | grep '*' | awk '{ print $1 }' | tail -n 1 | grep -o x.* | sed 's/x//g')" #If using ext. monitor and laptop open, get ext. monitor height
    SCREENHEIGHT="$(( $SCREENHEIGHT - $ANTI_BOTTOM_PANEL - $ANTI_TOP_PANEL ))"
else
    SCREENWIDTH="$(xdpyinfo | grep dimensions: | awk '{ print $2 }' | cut -d \x -f 1)" #If SPANMONITOR !=N, then record full width of two or more monitors (if applicable) 
    SCREENWIDTH="$(( $SCREENWIDTH - $ANTI_LEFT_PANEL - $ANTI_RIGHT_PANEL ))"
    SCREENHEIGHT="$(xdpyinfo | grep dimensions: | awk '{ print $2 }' | grep -o x.* | sed 's/x//g')" #If SPANMONITOR !=N, then record full height of two or more monitors (if applicable) 
    SCREENHEIGHT="$(( $SCREENHEIGHT - $ANTI_BOTTOM_PANEL - $ANTI_TOP_PANEL ))"
fi
#
#--[Some simple audio checks - DO NOT EDIT]#####
#This is needed because Raspberry Pi's favor ALSA and most other systems are ok with PulseAudio.
echo "Performing audio check (ALSA vs. PulseAudio vs. JACK)..."
ALSA="$(aplay -l && echo "OK" || echo "NOK")" #Check if ALSA is running
ALSA="$(echo "$ALSA" | grep -o "OK")"
PULSE="$(pactl list && echo "OK" || echo "NOK")" #Check if PulseAudio is running
PULSE="$(echo "$PULSE" | grep -o "OK")"
SYSTEMTYPE="$(uname -m)"
if [ "$SYSTEMTYPE" = "i686" ] || [ "$SYSTEMTYPE" = "x86_64" ] && [ "$PULSE" = "OK" ] #Change sound server if not using a Pi
then
    JACKCHECK="$(ps aux | grep jackd | grep -v grep)" #If JACK is running, there will be output; otherwise, it'll be blank.
    if [ "$JACKCHECK" = "" ]
    then
        SOUNDSERVER=pulse #If JACK is NOT running, use PulseAudio
    else
        SOUNDSERVER=jack #If JACK is running, use JACK
    fi
fi
#
#####[Stream/Record starts here: - DO NOT EDIT]#####
if [ "$OVERLAYes" -eq 1 ] #If you have an overlay
then
    if [ "$SCREENHEIGHT" -gt 720 ] #Screen widths below 720p on a RPi do not need to be scaled
    then
        if [ "$SYSTEMTYPE" = "x86_64" ] #Cancels the scaling and CRF value of 1 for x86_64 computers
        then
            convert "$IMAGEOVERLAY" -resize $SCREENWIDTH'x'$SCREENHEIGHT\! temp_IMAGEOVERLAY.png #Copies and converts overlay image to fit the screen size.
            "$FFMPEG" -vsync 0 -f x11grab -video_size $SCREENWIDTH'x'$SCREENHEIGHT -i $DISPLAY+$ANTI_LEFT_PANEL,$ANTI_TOP_PANEL -i "temp_IMAGEOVERLAY.png" \
            -f $SOUNDSERVER -thread_queue_size $THREAD_QUEUE -ac 2 -i default \
            -filter_complex "[0:v][1:v] overlay=0:0" -pix_fmt yuv420p -c:v libx264 -x264-params "nal-hdr=cbr" -c:a aac -b:a 96k -ar 44100 \
            -crf $QUALITY -preset medium \
            -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M -f flv -movflags +faststart -profile:v baseline -level 3.0 \
            -threads 0 "$1"
        else #If screen is > 720p but are using ARM or i686 and older then scale
            convert "$IMAGEOVERLAY" -resize 1280x720\! temp_IMAGEOVERLAY.png #Copies and converts overlay image to fit as 1280x720
            "$FFMPEG" -vsync 0 -f x11grab -video_size $SCREENWIDTH'x'$SCREENHEIGHT -i $DISPLAY+$ANTI_LEFT_PANEL,$ANTI_TOP_PANEL -i "temp_IMAGEOVERLAY.png" \
            -f $SOUNDSERVER -thread_queue_size $THREAD_QUEUE -ac 2 -i default \
            -filter_complex "[0]scale=1280:720,overlay=0:0" -pix_fmt yuv420p -c:v libx264 -x264-params "nal-hdr=cbr" -c:a aac -b:a 96k -ar 44100 \
            -crf $QUALITY -preset ultrafast \
            -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M -f flv -movflags +faststart -profile:v baseline -level 3.0 \
            -threads 0 "$1"
        fi
    else #If screen is equal to or below 720p, no matter what the architecture, use this...
        convert "$IMAGEOVERLAY" -resize $SCREENWIDTH'x'$SCREENHEIGHT\! temp_IMAGEOVERLAY.png #Copies and converts overlay image to fit the screen size.
        "$FFMPEG" -vsync 0 -f x11grab -video_size $SCREENWIDTH'x'$SCREENHEIGHT -i $DISPLAY+$ANTI_LEFT_PANEL,$ANTI_TOP_PANEL -i "temp_IMAGEOVERLAY.png" \
        -f $SOUNDSERVER -thread_queue_size $THREAD_QUEUE -ac 2 -i default \
        -filter_complex "[0:v][1:v] overlay=0:0" -pix_fmt yuv420p -c:v libx264 -x264-params "nal-hdr=cbr" -c:a aac -b:a 96k -ar 44100 \
        -crf $QUALITY -preset ultrafast \
        -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M -f flv -movflags +faststart -profile:v baseline -level 3.0 \
        -threads 0 "$1"
    fi
else #If you don't have an overlay
    if [ "$SCREENHEIGHT" -gt 720 ] #Screen widths below 720p on a RPi do not need to be scaled
    then
        if [ "$SYSTEMTYPE" = "x86_64" ] #Cancels the scaling and CRF value of 1 for x86_64 computers
        then
            "$FFMPEG" -vsync 0 -f $SOUNDSERVER -thread_queue_size $THREAD_QUEUE -ac 2 -i default \
            -f x11grab -video_size $SCREENWIDTH'x'$SCREENHEIGHT -i $DISPLAY+$ANTI_LEFT_PANEL,$ANTI_TOP_PANEL -c:v libx264 -x264-params "nal-hdr=cbr" \
            -crf $QUALITY -preset medium -vf "format=yuv420p" -c:a aac -b:a 96k -ar 44100 \
            -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M -f flv -movflags +faststart -profile:v baseline -level 3.0 \
            -threads 0 "$1"
        else #If screen is > 720p but are using ARM or i686 and older then scale
            "$FFMPEG" -f $SOUNDSERVER -thread_queue_size $THREAD_QUEUE -ac 2 -i default \
            -f x11grab -video_size $SCREENWIDTH'x'$SCREENHEIGHT -i $DISPLAY+$ANTI_LEFT_PANEL,$ANTI_TOP_PANEL -c:v libx264 -x264-params "nal-hdr=cbr" \
            -crf $QUALITY -preset ultrafast -vf "scale=$SCALE:-1,format=yuv420p" -c:a aac -b:a 96k -ar 44100 \
            -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M -f flv -movflags +faststart -profile:v baseline -level 3.0 \
            -threads 0 "$1"
        fi
    else #If screen is equal to or below 720p, no matter what the architecture, use this...
        "$FFMPEG" -f $SOUNDSERVER -thread_queue_size $THREAD_QUEUE -ac 2 -i default \
        -f x11grab -video_size $SCREENWIDTH'x'$SCREENHEIGHT -i $DISPLAY+$ANTI_LEFT_PANEL,$ANTI_TOP_PANEL -c:v libx264 -x264-params "nal-hdr=cbr" \
        -crf $QUALITY -preset ultrafast -vf "format=yuv420p" -c:a aac -b:a 96k -ar 44100 \
        -b:v 1M -minrate 1M -maxrate 1M -bufsize 2M -f flv -movflags +faststart -profile:v baseline -level 3.0 \
        -threads 0 "$1"
    fi
fi
